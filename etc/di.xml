<?xml version="1.0" ?>
<!--
  ~ @author Monei Team
  ~ @copyright Copyright Â© Monei (https://monei.com)
  -->
<config
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd"
>
  <preference
    for="Monei\MoneiPayment\Api\Config\AllMoneiPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\AllMoneiPaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiPaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiCardPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiCardPaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiBizumPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiBizumPaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiGoogleApplePaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiGoogleApplePaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiPaypalPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiPaypalPaymentModuleConfig"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\Checkout\SaveTokenizationInterface"
    type="Monei\MoneiPayment\Service\Checkout\SaveTokenization"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\GetPaymentInterface"
    type="Monei\MoneiPayment\Service\Api\GetPayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\GetPaymentMethodsInterface"
    type="Monei\MoneiPayment\Service\Api\GetPaymentMethods"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\CancelPaymentInterface"
    type="Monei\MoneiPayment\Service\Api\CancelPayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\RefundPaymentInterface"
    type="Monei\MoneiPayment\Service\Api\RefundPayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\CapturePaymentInterface"
    type="Monei\MoneiPayment\Service\Api\CapturePayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\ConfirmPaymentInterface"
    type="Monei\MoneiPayment\Service\Api\ConfirmPayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\CreatePaymentInterface"
    type="Monei\MoneiPayment\Service\Api\CreatePayment"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\VerifyApplePayDomainInterface"
    type="Monei\MoneiPayment\Service\Api\VerifyApplePayDomain"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\GenerateInvoiceInterface"
    type="Monei\MoneiPayment\Service\GenerateInvoice"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\Checkout\CreateLoggedMoneiPaymentVaultInterface"
    type="Monei\MoneiPayment\Service\Checkout\CreateLoggedMoneiPaymentVault"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\Checkout\CreateLoggedMoneiPaymentInSiteInterface"
    type="Monei\MoneiPayment\Service\Checkout\CreateLoggedMoneiPaymentInSite"
  />
  <preference
    for="Monei\MoneiPayment\Api\Service\Checkout\CreateGuestMoneiPaymentInSiteInterface"
    type="Monei\MoneiPayment\Service\Checkout\CreateGuestMoneiPaymentInSite"
  />
  <preference
    for="Magento\Sales\Controller\Adminhtml\Order\Creditmemo\Save"
    type="Monei\MoneiPayment\Controller\Adminhtml\Order\Creditmemo\Save"
  />
  <preference
    for="Monei\MoneiPayment\Api\Helper\PaymentMethodFormatterInterface"
    type="Monei\MoneiPayment\Helper\PaymentMethodFormatter"
  />

  <!-- Define PaymentMethodFormatter with explicit dependencies -->
  <type name="Monei\MoneiPayment\Helper\PaymentMethodFormatter">
    <arguments>
      <argument name="paymentMethodHelper" xsi:type="object">Monei\MoneiPayment\Helper\PaymentMethod</argument>
    </arguments>
  </type>

  <!-- Plugin to mark customer as notified after order cancellation for Monei payments -->
  <type name="Magento\Sales\Model\Order">
    <plugin name="monei_order_cancel_notification" type="Monei\MoneiPayment\Plugin\OrderCancel" sortOrder="10" />
  </type>

  <type name="Monei\MoneiPayment\Service\Logger\Handler">
    <arguments>
      <argument name="scopeConfig" xsi:type="object">Magento\Framework\App\Config\ScopeConfigInterface</argument>
      <argument name="filesystem" xsi:type="object">Magento\Framework\Filesystem\Driver\File</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\Logger">
    <arguments>
      <argument name="handler" xsi:type="object">Monei\MoneiPayment\Service\Logger\Handler</argument>
      <argument name="name" xsi:type="string">monei</argument>
    </arguments>
  </type>

  <type name="Magento\Sales\Model\Service\CreditmemoService">
    <plugin name="set_order_status_after_refund" type="Monei\MoneiPayment\Plugin\OrderStatusAfterRefund" />
  </type>

  <type name="Magento\Checkout\Model\ShippingInformationManagement">
    <plugin
      name="monei_checkout_shipping_information_management"
      type="Monei\MoneiPayment\Plugin\CheckoutShippingInformationManagement"
    />
  </type>

  <type name="Magento\Sales\Model\Order\StatusLabel">
    <plugin name="monei_order_status_label" type="Monei\MoneiPayment\Plugin\SalesOrderStatusLabel" />
  </type>

  <type name="Magento\Sales\Model\Order\Config">
    <plugin name="monei_order_config" type="Monei\MoneiPayment\Plugin\SalesOrderConfig" />
  </type>

  <virtualType name="MoneiPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::REDIRECT_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">Magento\Payment\Gateway\Config\ValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>

  <type name="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">Magento\Payment\Gateway\Config\ConfigValueHandler</item>
      </argument>
    </arguments>
  </type>

  <type name="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">Magento\Payment\Gateway\Config\Config</argument>
    </arguments>
  </type>

  <type name="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::REDIRECT_CODE</argument>
    </arguments>
  </type>

  <virtualType name="MoneiCommandPool" type="Magento\Payment\Gateway\Command\CommandPool">
    <arguments>
      <argument name="commands" xsi:type="array">
        <item name="initialize" xsi:type="string">Magento\Payment\Gateway\Command\NullCommand</item>
        <item name="capture" xsi:type="string">Monei\MoneiPayment\Gateway\Command\Capture</item>
        <item name="refund" xsi:type="string">Monei\MoneiPayment\Gateway\Command\Refund</item>
      </argument>
    </arguments>
  </virtualType>
  <!-- End monei payment configuration  -->

  <!-- Configuration for Monei Card payment -->
  <virtualType name="MoneiCardPaymentValueHandlerPool" type="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiCardPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiCardPaymentValueHandler" type="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiCardPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiCardPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::CARD_CODE</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiCardPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::CARD_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiCardPaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End monei card payment configuration  -->

  <!-- Configuration for Monei Vault payment -->
  <virtualType name="MoneiVaultPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::CC_VAULT_CODE</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiVaultPaymentValueHandler" type="VaultPaymentDefaultValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiVaultPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiVaultPaymentValueHandlerPool" type="VaultPaymentValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiVaultPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiCardVaultFacade" type="Magento\Vault\Model\Method\Vault">
    <arguments>
      <argument name="config" xsi:type="object">MoneiVaultPaymentConfig</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiVaultPaymentValueHandlerPool</argument>
      <argument name="vaultProvider" xsi:type="object">MoneiCardPaymentFacade</argument>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::CC_VAULT_CODE</argument>
    </arguments>
  </virtualType>
  <!-- End vault payment configuration  -->

  <!-- Configuration for Monei Bizum payment -->
  <virtualType name="MoneiBizumPaymentValueHandlerPool" type="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiBizumPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiBizumPaymentValueHandler" type="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiBizumPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiBizumPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::BIZUM_CODE</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiBizumPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::BIZUM_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiBizumPaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End monei bizum payment configuration  -->

  <!-- Configuration for Monei Google and Apple payment -->
  <virtualType name="MoneiGoogleApplePaymentValueHandlerPool" type="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiGoogleApplePaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiGoogleApplePaymentValueHandler" type="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiGoogleApplePaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiGoogleApplePaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::GOOGLE_APPLE_CODE</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiGoogleApplePaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::GOOGLE_APPLE_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiGoogleApplePaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End Monei Google and Apple payment configuration  -->

  <!-- Configuration for Monei Multibanco redirect payment -->
  <virtualType
    name="MoneiMultibancoRedirectPaymentValueHandlerPool"
    type="Magento\Payment\Gateway\Config\ValueHandlerPool"
  >
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiMultibancoRedirectPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType
    name="MoneiMultibancoRedirectPaymentValueHandler"
    type="Magento\Payment\Gateway\Config\ConfigValueHandler"
  >
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiMultibancoRedirectPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiMultibancoRedirectPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">
        Monei\MoneiPayment\Model\Payment\Monei::MULTIBANCO_REDIRECT_CODE
      </argument>
    </arguments>
  </virtualType>

  <type name="Monei\MoneiPayment\Model\Config\MoneiMultibancoRedirectPaymentModuleConfig">
    <arguments>
      <argument name="scopeConfig" xsi:type="object">Magento\Framework\App\Config\ScopeConfigInterface</argument>
    </arguments>
  </type>

  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiMultibancoRedirectPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiMultibancoRedirectPaymentModuleConfig"
  />

  <virtualType name="MoneiMultibancoRedirectPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::MULTIBANCO_REDIRECT_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiMultibancoRedirectPaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End Monei Multibanco redirect payment configuration  -->

  <!-- Configuration for Monei MBWay redirect payment -->
  <virtualType name="MoneiMBWayRedirectPaymentValueHandlerPool" type="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiMBWayRedirectPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiMBWayRedirectPaymentValueHandler" type="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiMBWayRedirectPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiMBWayRedirectPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">
        Monei\MoneiPayment\Model\Payment\Monei::MBWAY_REDIRECT_CODE
      </argument>
    </arguments>
  </virtualType>

  <type name="Monei\MoneiPayment\Model\Config\MoneiMBWayRedirectPaymentModuleConfig">
    <arguments>
      <argument name="scopeConfig" xsi:type="object">Magento\Framework\App\Config\ScopeConfigInterface</argument>
    </arguments>
  </type>

  <preference
    for="Monei\MoneiPayment\Api\Config\MoneiMBWayRedirectPaymentModuleConfigInterface"
    type="Monei\MoneiPayment\Model\Config\MoneiMBWayRedirectPaymentModuleConfig"
  />

  <virtualType name="MoneiMBWayRedirectPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::MBWAY_REDIRECT_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiMBWayRedirectPaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End Monei MBWay redirect payment configuration  -->

  <!-- Configuration for Monei PayPal payment -->
  <virtualType name="MoneiPaypalPaymentValueHandlerPool" type="Magento\Payment\Gateway\Config\ValueHandlerPool">
    <arguments>
      <argument name="handlers" xsi:type="array">
        <item name="default" xsi:type="string">MoneiPaypalPaymentValueHandler</item>
      </argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiPaypalPaymentValueHandler" type="Magento\Payment\Gateway\Config\ConfigValueHandler">
    <arguments>
      <argument name="configInterface" xsi:type="object">MoneiPaypalPaymentConfig</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiPaypalPaymentConfig" type="Magento\Payment\Gateway\Config\Config">
    <arguments>
      <argument name="methodCode" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::PAYPAL_CODE</argument>
    </arguments>
  </virtualType>

  <virtualType name="MoneiPaypalPaymentFacade" type="Magento\Payment\Model\Method\Adapter">
    <arguments>
      <argument name="code" xsi:type="const">Monei\MoneiPayment\Model\Payment\Monei::PAYPAL_CODE</argument>
      <argument name="formBlockType" xsi:type="string">Magento\Payment\Block\Form</argument>
      <argument name="infoBlockType" xsi:type="string">Monei\MoneiPayment\Block\Info\Monei</argument>
      <argument name="valueHandlerPool" xsi:type="object">MoneiPaypalPaymentValueHandlerPool</argument>
      <argument name="commandPool" xsi:type="object">MoneiCommandPool</argument>
    </arguments>
  </virtualType>
  <!-- End Monei PayPal payment configuration  -->

  <!-- Configure LockManager for MySQL implementation -->
  <type name="Magento\Framework\Lock\LockManagerInterface">
    <arguments>
      <argument name="lockManagerType" xsi:type="string">db</argument>
    </arguments>
  </type>

  <!-- ProcessingLock service configuration -->
  <type name="Monei\MoneiPayment\Model\Service\ProcessingLock">
    <arguments>
      <argument name="lockManager" xsi:type="object">Magento\Framework\Lock\LockManagerInterface</argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Capture command configuration -->
  <type name="Monei\MoneiPayment\Gateway\Command\Capture">
    <arguments>
      <argument name="capturePaymentService" xsi:type="object">
        Monei\MoneiPayment\Api\Service\CapturePaymentInterface
      </argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Lock Management -->
  <preference for="Monei\MoneiPayment\Api\LockManagerInterface" type="Monei\MoneiPayment\Model\LockManager" />
  <preference
    for="Monei\MoneiPayment\Model\Service\ProcessingLockInterface"
    type="Monei\MoneiPayment\Model\Service\ProcessingLock"
  />

  <!-- Type configuration for ApiExceptionHandler -->
  <type name="Monei\MoneiPayment\Service\Api\ApiExceptionHandler">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Type configuration for MoneiApiClient -->
  <type name="Monei\MoneiPayment\Service\Api\MoneiApiClient">
    <arguments>
      <argument name="storeManager" xsi:type="object">Magento\Store\Model\StoreManagerInterface</argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="moduleVersion" xsi:type="object">Monei\MoneiPayment\Model\Config\Source\ModuleVersion</argument>
    </arguments>
  </type>

  <!-- Quote Services -->
  <preference
    for="Monei\MoneiPayment\Api\Service\Quote\GetAddressDetailsByQuoteAddressInterface"
    type="Monei\MoneiPayment\Service\Quote\GetAddressDetailsByQuoteAddress"
  />

  <preference
    for="Monei\MoneiPayment\Api\Service\Quote\GetCustomerDetailsByQuoteInterface"
    type="Monei\MoneiPayment\Service\Quote\GetCustomerDetailsByQuote"
  />

  <!-- Type configurations for standardized SDK services -->
  <type name="Monei\MoneiPayment\Service\Api\CreatePayment">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="urlBuilder" xsi:type="object">Magento\Framework\Url</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\GetPayment">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\GetPaymentMethods">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="registryAccountId" xsi:type="object">Monei\MoneiPayment\Registry\AccountId</argument>
    </arguments>
  </type>

  <!-- Checkout Services -->
  <type name="Monei\MoneiPayment\Service\Checkout\CreateGuestMoneiPaymentInSite">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="quoteRepository" xsi:type="object">Magento\Quote\Api\CartRepositoryInterface</argument>
      <argument name="checkoutSession" xsi:type="object">Magento\Checkout\Model\Session</argument>
      <argument name="maskedQuoteIdToQuoteId" xsi:type="object">
        Magento\Quote\Model\MaskedQuoteIdToQuoteIdInterface
      </argument>
      <argument name="getCustomerDetailsByQuote" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetCustomerDetailsByQuoteInterface
      </argument>
      <argument name="getAddressDetailsByQuoteAddress" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetAddressDetailsByQuoteAddressInterface
      </argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="createPayment" xsi:type="object">Monei\MoneiPayment\Api\Service\CreatePaymentInterface</argument>
      <argument name="getPaymentService" xsi:type="object">Monei\MoneiPayment\Api\Service\GetPaymentInterface</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\Checkout\CreateLoggedMoneiPaymentInSite">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="quoteRepository" xsi:type="object">Magento\Quote\Api\CartRepositoryInterface</argument>
      <argument name="checkoutSession" xsi:type="object">Magento\Checkout\Model\Session</argument>
      <argument name="customerSession" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetCustomerDetailsByQuoteInterface
      </argument>
      <argument name="getAddressDetailsByQuoteAddress" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetAddressDetailsByQuoteAddressInterface
      </argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="createPayment" xsi:type="object">Monei\MoneiPayment\Api\Service\CreatePaymentInterface</argument>
      <argument name="getPaymentService" xsi:type="object">Monei\MoneiPayment\Api\Service\GetPaymentInterface</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\Checkout\CreateLoggedMoneiPaymentVault">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="quoteRepository" xsi:type="object">Magento\Quote\Api\CartRepositoryInterface</argument>
      <argument name="checkoutSession" xsi:type="object">Magento\Checkout\Model\Session</argument>
      <argument name="getCustomerDetailsByQuote" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetCustomerDetailsByQuoteInterface
      </argument>
      <argument name="getAddressDetailsByQuoteAddress" xsi:type="object">
        Monei\MoneiPayment\Api\Service\Quote\GetAddressDetailsByQuoteAddressInterface
      </argument>
      <argument name="tokenManagement" xsi:type="object">Magento\Vault\Api\PaymentTokenManagementInterface</argument>
      <argument name="createPayment" xsi:type="object">Monei\MoneiPayment\Api\Service\CreatePaymentInterface</argument>
      <argument name="getPaymentService" xsi:type="object">Monei\MoneiPayment\Api\Service\GetPaymentInterface</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Service\Checkout\SaveTokenization">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="exceptionHandler" xsi:type="object">Monei\MoneiPayment\Service\Api\ApiExceptionHandler</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Service\Api\MoneiApiClient</argument>
      <argument name="quoteRepository" xsi:type="object">Magento\Quote\Api\CartRepositoryInterface</argument>
      <argument name="checkoutSession" xsi:type="object">Magento\Checkout\Model\Session</argument>
      <argument name="getPaymentService" xsi:type="object">Monei\MoneiPayment\Api\Service\GetPaymentInterface</argument>
    </arguments>
  </type>

  <!-- Type configuration for LockManager -->
  <type name="Monei\MoneiPayment\Model\LockManager">
    <arguments>
      <argument name="lockManager" xsi:type="object">Magento\Framework\Lock\Backend\Database</argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Type configuration for ProcessingLock -->
  <type name="Monei\MoneiPayment\Model\Service\ProcessingLock">
    <arguments>
      <argument name="lockManager" xsi:type="object">Monei\MoneiPayment\Api\LockManagerInterface</argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Type configuration for PaymentProcessor -->
  <type name="Monei\MoneiPayment\Model\PaymentProcessor">
    <arguments>
      <argument name="orderRepository" xsi:type="object">Magento\Sales\Api\OrderRepositoryInterface</argument>
      <argument name="invoiceService" xsi:type="object">Monei\MoneiPayment\Service\InvoiceService</argument>
      <argument name="lockManager" xsi:type="object">Monei\MoneiPayment\Api\LockManagerInterface</argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="moneiApiClient" xsi:type="object">Monei\MoneiPayment\Model\Api\MoneiApiClient</argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
      <argument name="orderSender" xsi:type="object">Magento\Sales\Model\Order\Email\Sender\OrderSender</argument>
      <argument name="searchCriteriaBuilder" xsi:type="object">Magento\Framework\Api\SearchCriteriaBuilder</argument>
      <argument name="getPaymentInterface" xsi:type="object">
        Monei\MoneiPayment\Api\Service\GetPaymentInterface
      </argument>
      <argument name="orderFactory" xsi:type="object">Magento\Sales\Model\OrderFactory</argument>
      <argument name="createVaultPayment" xsi:type="object">
        Monei\MoneiPayment\Service\Order\CreateVaultPayment
      </argument>
    </arguments>
  </type>

  <!-- Type configuration for Callback controller -->
  <type name="Monei\MoneiPayment\Controller\Payment\Callback">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="resultJsonFactory" xsi:type="object">Magento\Framework\Controller\Result\JsonFactory</argument>
      <argument name="paymentProcessor" xsi:type="object">Monei\MoneiPayment\Api\PaymentProcessorInterface</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Model\Api\MoneiApiClient</argument>
      <argument name="orderRepository" xsi:type="object">Magento\Sales\Api\OrderRepositoryInterface</argument>
    </arguments>
  </type>

  <!-- Type configuration for Complete controller -->
  <type name="Monei\MoneiPayment\Controller\Payment\Complete">
    <arguments>
      <argument name="orderRepository" xsi:type="object">Magento\Sales\Api\OrderRepositoryInterface</argument>
      <argument name="orderFactory" xsi:type="object">Magento\Sales\Model\OrderFactory</argument>
      <argument name="resultRedirectFactory" xsi:type="object">
        Magento\Framework\Controller\Result\RedirectFactory
      </argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="paymentProcessor" xsi:type="object">Monei\MoneiPayment\Api\PaymentProcessorInterface</argument>
      <argument name="apiClient" xsi:type="object">Monei\MoneiPayment\Model\Api\MoneiApiClient</argument>
      <argument name="getPaymentService" xsi:type="object">Monei\MoneiPayment\Api\Service\GetPaymentInterface</argument>
    </arguments>
  </type>

  <!-- Payment Processing Services -->
  <preference for="Monei\MoneiPayment\Api\PaymentProcessorInterface" type="Monei\MoneiPayment\Model\PaymentProcessor" />

  <!-- Type configuration for ValidateWebhookSignature -->
  <type name="Monei\MoneiPayment\Service\ValidateWebhookSignature">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- Type configuration for InvoiceService -->
  <type name="Monei\MoneiPayment\Service\InvoiceService">
    <arguments>
      <argument name="magentoInvoiceService" xsi:type="object">Magento\Sales\Model\Service\InvoiceService</argument>
      <argument name="invoiceRepository" xsi:type="object">Magento\Sales\Api\InvoiceRepositoryInterface</argument>
      <argument name="transactionFactory" xsi:type="object">Magento\Framework\DB\TransactionFactory</argument>
      <argument name="invoiceSender" xsi:type="object">Magento\Sales\Model\Order\Email\Sender\InvoiceSender</argument>
      <argument name="lockManager" xsi:type="object">Monei\MoneiPayment\Api\LockManagerInterface</argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="moduleConfig" xsi:type="object">
        Monei\MoneiPayment\Api\Config\MoneiPaymentModuleConfigInterface
      </argument>
    </arguments>
  </type>

  <!-- Helper class for payment method formatting -->
  <type name="Monei\MoneiPayment\Block\Info\Monei">
    <arguments>
      <argument name="paymentMethodFormatter" xsi:type="object">
        Monei\MoneiPayment\Helper\PaymentMethodFormatter
      </argument>
    </arguments>
  </type>

  <!-- Plugin to mark order history entries as notified after invoice email is sent -->
  <type name="Magento\Sales\Model\Order\Email\Sender\InvoiceSender">
    <plugin
      name="monei_order_invoice_email_sent"
      type="Monei\MoneiPayment\Plugin\OrderInvoiceEmailSent"
      sortOrder="10"
    />
  </type>

  <!-- Type configuration for OrderInvoiceEmailSent -->
  <type name="Monei\MoneiPayment\Plugin\OrderInvoiceEmailSent">
    <arguments>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
      <argument name="orderRepository" xsi:type="object">Magento\Sales\Api\OrderRepositoryInterface</argument>
    </arguments>
  </type>

  <type name="Magento\Framework\App\FrontController">
    <plugin
      name="monei_apple_pay_domain_verification"
      type="Monei\MoneiPayment\Plugin\ApplePayVerification"
      sortOrder="10"
    />
  </type>

  <preference
    for="Monei\MoneiPayment\Api\Service\VerifyApplePayDomainInterface"
    type="Monei\MoneiPayment\Service\Api\VerifyApplePayDomain"
  />

  <!-- Configuration for JSON validators -->
  <type name="Monei\MoneiPayment\Model\Config\Backend\JsonValidator">
    <arguments>
      <argument name="policyInterface" xsi:type="object">Magento\Framework\Authorization\Policy\DefaultPolicy</argument>
    </arguments>
  </type>

  <!-- Gateway Command Types -->
  <type name="Monei\MoneiPayment\Gateway\Command\Refund">
    <arguments>
      <argument name="refundPaymentService" xsi:type="object">
        Monei\MoneiPayment\Api\Service\RefundPaymentInterface
      </argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <type name="Monei\MoneiPayment\Gateway\Command\Capture">
    <arguments>
      <argument name="capturePaymentService" xsi:type="object">
        Monei\MoneiPayment\Api\Service\CapturePaymentInterface
      </argument>
      <argument name="logger" xsi:type="object">Monei\MoneiPayment\Service\Logger</argument>
    </arguments>
  </type>

  <!-- AccountId Backend Model Configuration -->
  <type name="Monei\MoneiPayment\Model\Config\Backend\AccountId">
    <arguments>
      <argument name="context" xsi:type="object">Magento\Framework\Model\Context</argument>
      <argument name="registry" xsi:type="object">Magento\Framework\Registry</argument>
      <argument name="config" xsi:type="object">Magento\Framework\App\Config\ScopeConfigInterface</argument>
      <argument name="cacheTypeList" xsi:type="object">Magento\Framework\App\Cache\TypeListInterface</argument>
      <argument name="registryAccountId" xsi:type="object">Monei\MoneiPayment\Registry\AccountId</argument>
      <argument name="configWriter" xsi:type="object">Magento\Framework\App\Config\Storage\WriterInterface</argument>
    </arguments>
  </type>

</config>
<!-- Updated configuration for dependency injection fix -->
